#ifndef INTBASEOPS_H
#define INTBASEOPS_H

/* x86 operators for use in DNA distance testing concepts with execution traces. */

#include "intbase.h"

const unsigned int nOPsbases = 538;
std::string OPsbases[nOPsbases] = {
    "ADC",
    "ADD",
    "ADDPD",
    "ADDPS",
    "ADDSD",
    "ADDSS",
    "ADDSUBPD",
    "ADDSUBPS",
    "AND",
    "ANDNPD",
    "ANDNPS",
    "ANDPD",
    "ANDPS",
    "BLENDPD",
    "BLENDPS",
    "BSF",
    "BSR",
    "BT",
    "BTC",
    "BTR",
    "BTS",
    "CALL",
    "CALLF",
    "CBW",
    "CLC",
    "CLD",
    "CLFLUSH",
    "CLI",
    "CLTS",
    "CMC",
    "CMOVB",
    "CMOVBE",
    "CMOVL",
    "CMOVLE",
    "CMOVNB",
    "CMOVNBE",
    "CMOVNL",
    "CMOVNLE",
    "CMOVNO",
    "CMOVNP",
    "CMOVNS",
    "CMOVNZ",
    "CMOVO",
    "CMOVP",
    "CMOVS",
    "CMOVZ",
    "CMP",
    "CMPPD",
    "CMPPS",
    "CMPS",
    "CMPSD",
    "CMPSS",
    "CMPXCHG",
    "CMPXCHG8B",
    "COMISD",
    "COMISS",
    "CPUID",
    "CRC32",
    "CVTDQ2PD",
    "CVTDQ2PS",
    "CVTPD2DQ",
    "CVTPD2PI",
    "CVTPD2PS",
    "CVTPI2PD",
    "CVTPI2PS",
    "CVTPS2DQ",
    "CVTPS2PD",
    "CVTPS2PI",
    "CVTSD2SI",
    "CVTSD2SS",
    "CVTSI2SD",
    "CVTSI2SS",
    "CVTSS2SD",
    "CVTSS2SI",
    "CVTTPD2DQ",
    "CVTTPD2PI",
    "CVTTPS2DQ",
    "CVTTPS2PI",
    "CVTTSD2SI",
    "CVTTSS2SI",
    "CWD",
    "DEC",
    "DIV",
    "DIVPD",
    "DIVPS",
    "DIVSD",
    "DIVSS",
    "DPPD",
    "DPPS",
    "EMMS",
    "ENTER",
    "EXTRACTPS",
    "F2XM1",
    "FABS",
    "FADD",
    "FADDP",
    "FBLD",
    "FBSTP",
    "FCHS",
    "FCLEX",
    "FCMOVB",
    "FCMOVBE",
    "FCMOVE",
    "FCMOVNB",
    "FCMOVNBE",
    "FCMOVNE",
    "FCMOVNU",
    "FCMOVU",
    "FCOM",
    "FCOM2",
    "FCOMI",
    "FCOMIP",
    "FCOMP",
    "FCOMP3",
    "FCOMP5",
    "FCOMPP",
    "FCOS",
    "FDECSTP",
    "FDIV",
    "FDIVP",
    "FDIVR",
    "FDIVRP",
    "FFREE",
    "FFREEP",
    "FIADD",
    "FICOM",
    "FICOMP",
    "FIDIV",
    "FIDIVR",
    "FILD",
    "FIMUL",
    "FINCSTP",
    "FINIT",
    "FIST",
    "FISTP",
    "FISTTP",
    "FISUB",
    "FISUBR",
    "FLD",
    "FLD1",
    "FLDCW",
    "FLDENV",
    "FLDL2E",
    "FLDL2T",
    "FLDLG2",
    "FLDLN2",
    "FLDPI",
    "FLDZ",
    "FMUL",
    "FMULP",
    "FNCLEX",
    "FNDISI",
    "FNENI",
    "FNINIT",
    "FNOP",
    "FNSAVE",
    "FNSETPM",
    "FNSTCW",
    "FNSTENV",
    "FNSTSW",
    "FPATAN",
    "FPREM",
    "FPREM1",
    "FPTAN",
    "FRNDINT",
    "FRSTOR",
    "FS",
    "FSAVE",
    "FSCALE",
    "FSIN",
    "FSINCOS",
    "FSQRT",
    "FST",
    "FSTCW",
    "FSTENV",
    "FSTP",
    "FSTP1",
    "FSTP8",
    "FSTP9",
    "FSTSW",
    "FSUB",
    "FSUBP",
    "FSUBR",
    "FSUBRP",
    "FTST",
    "FUCOM",
    "FUCOMI",
    "FUCOMIP",
    "FUCOMP",
    "FUCOMPP",
    "FWAIT",
    "FXAM",
    "FXCH",
    "FXCH4",
    "FXCH7",
    "FXRSTOR",
    "FXSAVE",
    "FXTRACT",
    "FYL2X",
    "FYL2XP1",
    "GETSEC",
    "GS",
    "HADDPD",
    "HADDPS",
    "HINT_NOP",
    "HLT",
    "HSUBPD",
    "HSUBPS",
    "IDIV",
    "IMUL",
    "IN",
    "INC",
    "INS",
    "INSERTPS",
    "INT",
    "INT1",
    "INTO",
    "INVD",
    "INVEPT",
    "INVLPG",
    "INVVPID",
    "IRET",
    "JB",
    "JBE",
    "JECXZ",
    "JL",
    "JLE",
    "JMP",
    "JMPF",
    "JNB",
    "JNBE",
    "JNL",
    "JNLE",
    "JNO",
    "JNP",
    "JNS",
    "JNZ",
    "JO",
    "JP",
    "JS",
    "JZ",
    "LAHF",
    "LAR",
    "LDDQU",
    "LDMXCSR",
    "LEA",
    "LEAVE",
    "LFENCE",
    "LFS",
    "LGDT",
    "LGS",
    "LIDT",
    "LLDT",
    "LMSW",
    "LOCK",
    "LODS",
    "LOOP",
    "LOOPNZ",
    "LOOPZ",
    "LSL",
    "LSS",
    "LTR",
    "MASKMOVDQU",
    "MASKMOVQ",
    "MAXPD",
    "MAXPS",
    "MAXSD",
    "MAXSS",
    "MFENCE",
    "MINPD",
    "MINPS",
    "MINSD",
    "MINSS",
    "MNEMONIC",
    "MONITOR",
    "MOV",
    "MOVAPD",
    "MOVAPS",
    "MOVBE",
    "MOVD",
    "MOVDDUP",
    "MOVDQ2Q",
    "MOVDQA",
    "MOVDQU",
    "MOVHLPS",
    "MOVHPD",
    "MOVHPS",
    "MOVLHPS",
    "MOVLPD",
    "MOVLPS",
    "MOVMSKPD",
    "MOVMSKPS",
    "MOVNTDQ",
    "MOVNTI",
    "MOVNTPD",
    "MOVNTPS",
    "MOVNTQ",
    "MOVQ",
    "MOVQ2DQ",
    "MOVS",
    "MOVSD",
    "MOVSHDUP",
    "MOVSLDUP",
    "MOVSS",
    "MOVSX",
    "MOVSXD",
    "MOVUPD",
    "MOVUPS",
    "MOVZX",
    "MPSADBW",
    "MUL",
    "MULPD",
    "MULPS",
    "MULSD",
    "MULSS",
    "MWAIT",
    "NEG",
    "NO",
    "NOP",
    "NOT",
    "OR",
    "ORPD",
    "ORPS",
    "OUT",
    "OUTS",
    "PACKSSDW",
    "PACKSSWB",
    "PACKUSWB",
    "PADDB",
    "PADDD",
    "PADDQ",
    "PADDSB",
    "PADDSW",
    "PADDUSB",
    "PADDUSW",
    "PADDW",
    "PALIGNR",
    "PAND",
    "PANDN",
    "PAUSE",
    "PAVGB",
    "PAVGW",
    "PBLENDW",
    "PCMPEQB",
    "PCMPEQD",
    "PCMPEQW",
    "PCMPESTRI",
    "PCMPESTRM",
    "PCMPGTB",
    "PCMPGTD",
    "PCMPGTW",
    "PCMPISTRI",
    "PCMPISTRM",
    "PEXTRB",
    "PEXTRD",
    "PEXTRW",
    "PINSRB",
    "PINSRD",
    "PINSRW",
    "PMADDWD",
    "PMAXSW",
    "PMAXUB",
    "PMINSW",
    "PMINUB",
    "PMOVMSKB",
    "PMULHUW",
    "PMULHW",
    "PMULLW",
    "PMULUDQ",
    "POP",
    "POPCNT",
    "POPF",
    "POR",
    "PREFETCHNTA",
    "PREFETCHT0",
    "PREFETCHT1",
    "PREFETCHT2",
    "PSADBW",
    "PSHUFD",
    "PSHUFHW",
    "PSHUFLW",
    "PSHUFW",
    "PSLLD",
    "PSLLDQ",
    "PSLLQ",
    "PSLLW",
    "PSRAD",
    "PSRAW",
    "PSRLD",
    "PSRLDQ",
    "PSRLQ",
    "PSRLW",
    "PSUBB",
    "PSUBD",
    "PSUBQ",
    "PSUBSB",
    "PSUBSW",
    "PSUBUSB",
    "PSUBUSW",
    "PSUBW",
    "PUNPCKHBW",
    "PUNPCKHDQ",
    "PUNPCKHQDQ",
    "PUNPCKHWD",
    "PUNPCKLBW",
    "PUNPCKLDQ",
    "PUNPCKLQDQ",
    "PUNPCKLWD",
    "PUSH",
    "PUSHF",
    "PXOR",
    "R16/32/64",
    "R64/16",
    "R8",
    "RCL",
    "RCPPS",
    "RCPSS",
    "RCR",
    "RDMSR",
    "RDPMC",
    "RDTSC",
    "RDTSCP",
    "REP",
    "REPNZ",
    "REPZ",
    "RETF",
    "RETN",
    "REX",
    "REX.B",
    "REX.R",
    "REX.RB",
    "REX.RX",
    "REX.RXB",
    "REX.W",
    "REX.WB",
    "REX.WR",
    "REX.WRB",
    "REX.WRX",
    "REX.WRXB",
    "REX.WX",
    "REX.WXB",
    "REX.X",
    "REX.XB",
    "ROL",
    "ROR",
    "ROUNDPD",
    "ROUNDPS",
    "ROUNDSD",
    "ROUNDSS",
    "RSM",
    "RSQRTPS",
    "RSQRTSS",
    "SAHF",
    "SAL",
    "SAR",
    "SBB",
    "SCAS",
    "SETB",
    "SETBE",
    "SETL",
    "SETLE",
    "SETNB",
    "SETNBE",
    "SETNL",
    "SETNLE",
    "SETNO",
    "SETNP",
    "SETNS",
    "SETNZ",
    "SETO",
    "SETP",
    "SETS",
    "SETZ",
    "SFENCE",
    "SGDT",
    "SHL",
    "SHLD",
    "SHR",
    "SHRD",
    "SHUFPD",
    "SHUFPS",
    "SIDT",
    "SLDT",
    "SMSW",
    "SQRTPD",
    "SQRTPS",
    "SQRTSD",
    "SQRTSS",
    "STC",
    "STD",
    "STI",
    "STMXCSR",
    "STOS",
    "STR",
    "SUB",
    "SUBPD",
    "SUBPS",
    "SUBSD",
    "SUBSS",
    "SWAPGS",
    "SYSCALL",
    "SYSENTER",
    "SYSEXIT",
    "SYSRET",
    "TEST",
    "UCOMISD",
    "UCOMISS",
    "UD",
    "UD2",
    "UNDEFINED",
    "UNPCKHPD",
    "UNPCKHPS",
    "UNPCKLPD",
    "UNPCKLPS",
    "VERR",
    "VERW",
    "VMCALL",
    "VMCLEAR",
    "VMLAUNCH",
    "VMPTRLD",
    "VMPTRST",
    "VMREAD",
    "VMRESUME",
    "VMWRITE",
    "VMXOFF",
    "VMXON",
    "WBINVD",
    "WRMSR",
    "XADD",
    "XCHG",
    "XGETBV",
    "XLAT",
    "XOR",
    "XORPD",
    "XORPS",
    "XRSTOR",
    "XSAVE",
    "XSETBV"
};

class intbaseOPs : public intbase {
    void set_consts() {
        bases.clear(); // WARNING: not a good idea to to use multiple intbase subclasses!
        for (unsigned int i=0; i<nOPsbases; ++i) {
            bases.push_back(OPsbases[i]);
        }
        intbase::set_consts();
    };

public:
    intbaseOPs() : intbase() {
        set_consts();
    };
    intbaseOPs(base_t b) : intbase() {
        set_consts();
        intbase::init_logging();
        base_value = base_to_int(b);
    };
    intbaseOPs(const unsigned int b) : intbase() {
        set_consts();
        if (b <= get_alphabetsize())
            base_value = b;
        else {
            LOG4CXX_FATAL(logger, "intbaseOPs constructor: Invalid int base value b " << b << " should be in [0.." << get_alphabetsize() << "].  " << get_alphabetsize() << " is invalid, but is the end indicator.");
            abort();
        }
    };
    intbaseOPs(const intbaseOPs &ib) : intbase() {
        set_consts();
        base_value = ib.base_value;
    };
    friend void test_intbaseOPs(intbaseOPs& ib) {
        // >, <, ==, and != operators work
        ib.set_base((unsigned int)1);
        intbaseOPs ib2;
        ib2.set_base((unsigned int)0);
        if (!(ib2 < ib)) {
            LOG4CXX_FATAL(ib.logger, "ib2 " << ib2 << " >= ib " << ib);
            abort();
        }
        if (!(ib > ib2)) {
            LOG4CXX_FATAL(ib.logger, "ib <= ib2");
            abort();
        }
        if (!(ib == ib)) {
            LOG4CXX_FATAL(ib.logger, "ib != ib");
            abort();
        }
        if (!(ib2 != ib)) {
            LOG4CXX_FATAL(ib.logger, "ib2 == ib");
            abort();
        }
        LOG4CXX_INFO(ib.logger, "Relational operators work.");
    }
};

#endif // INTBASEOPS_H
